# fastapi_app.py
import logging
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import aiohttp
from typing import Literal, Any
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import re
import asyncio
from dotenv import load_dotenv
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = "postgresql+psycopg2://postgres:artas@localhost/uproject-users"
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

load_dotenv()
LOLZTOKEN = os.getenv("LOLZTOKEN")
print(LOLZTOKEN)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI
app = FastAPI()

# –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã, –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ
    allow_credentials=True,
    allow_methods=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ HTTP –º–µ—Ç–æ–¥—ã
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)

# –ú–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã Users
class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True, nullable=False)

# –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
Base.metadata.create_all(bind=engine)

# Pydantic –º–æ–¥–µ–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
class UserCreate(BaseModel):
    username: str

# –≠–Ω–¥–ø–æ–∏–Ω—Ç: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@app.get("/users")
def get_users():
    db = SessionLocal()
    users = db.query(User).all()
    db.close()
    return users

# –≠–Ω–¥–ø–æ–∏–Ω—Ç: –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.post("/users")
def create_user(user: UserCreate):
    db = SessionLocal()
    db_user = db.query(User).filter(User.username == user.username).first()
    if db_user:
        db.close()
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    new_user = User(username=user.username)
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    db.close()
    return new_user

# –ú–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫
class LinksRequest(BaseModel):
    links: list[str]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä—É
async def get_item_info(item_id, item_type="default"):
    base_url = "https://api.zelenka.guru/market"
    url = f"{base_url}/{item_id}?oauth_token={LOLZTOKEN}"
    
    if item_type == "special":
        url = f"{base_url}/{item_id}/special?oauth_token={LOLZTOKEN}"
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url) as response:
                if response.status == 200:
                    item_info = await response.json()
                    item_info = item_info["item"]
                    price = item_info["price"]
                    item_state = item_info["item_state"]

                    if item_state == "paid":
                        grnt_active = item_info.get("guarantee", {}).get("active", False)
                        return price, grnt_active, item_state
                    elif item_state == "active":
                        return price, item_state
                elif response.status == 429:
                    print(f"2 —Å–µ–∫—É–Ω–¥—ã")
                    await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
                    return await get_item_info(item_id, item_type)  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
                else:
                    print(f"Failed request with status: {response.status}")
                    return None
        except Exception as e:
            print(f"Error occurred: {e}")
            return None

# –≠–Ω–¥–ø–æ–∏–Ω—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫
@app.post("/process-links")
async def process_links(request: LinksRequest):
    links = request.links
    result = ""

    for link in links:
        item_id = ''.join(filter(str.isdigit, link))
        item_info = await get_item_info(item_id)

        if item_info:
            # –ï—Å–ª–∏ item_info –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—å—à–µ 3 –∑–Ω–∞—á–µ–Ω–∏–π, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if len(item_info) == 3:
                original_price, grnt_active, item_state = item_info
            elif len(item_info) == 2:
                original_price, item_state = item_info
            else:
                result += f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {link}\n"
                print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Å—ã–ª–∫–∏: {link}")
                continue

            discounted_price = round(float(original_price) * 0.97)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç
            if item_state == "paid":
                item_state = "üü¢"
                if grnt_active:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏–∏
                    item_state = "üü°"
            if item_state == "active":
                item_state = "üî¥"
            result += f"–ê–∫–∫–∞—É–Ω—Ç: {link} - –°–æ—Å—Ç–æ—è–Ω–∏–µ: {item_state}, –¶–µ–Ω–∞: {discounted_price}\n"
        else:
            result += f"–£–¥–∞–ª–µ–Ω–æ/–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞: {link}\n"
            print(f"–£–¥–∞–ª–µ–Ω–æ/–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞: {link}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

    return {"message": result}


# –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
